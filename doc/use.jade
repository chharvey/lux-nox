extends ../index-tpl.jade

block append vars
  - page_names.push('Suggested Use')
  - home_path = '../'

block append main
  mixin demo(settings)
    -
      var bases = {
        'Solarized': {
          dark: {
            text   : { class: 'a-c-s0'   , name: 'Solarized Base0'   }
          , emph   : { class: 'a-c-s1'   , name: 'Solarized Base1'   }
          , deemph : { class: 'a-c-s01'  , name: 'Solarized Base01'  }
          , hilite : { class: 'a-bc-s02' , name: 'Solarized Base02'  }
          , bg     : { class: 'a-bc-s03' , name: 'Solarized Base03'  }
          }
        , light: {
            text   : { class: 'a-c-s00'  , name: 'Solarized Base00'  }
          , emph   : { class: 'a-c-s01'  , name: 'Solarized Base01'  }
          , deemph : { class: 'a-c-s1'   , name: 'Solarized Base1'   }
          , hilite : { class: 'a-bc-s2'  , name: 'Solarized Base2'   }
          , bg     : { class: 'a-bc-s3'  , name: 'Solarized Base3'   }
          }
        , accent: {
            red:     { class: 'a-c-sr'   , name: 'Solarized Red'     }
          , orange:  { class: 'a-c-so'   , name: 'Solarized Orange'  }
          , yellow:  { class: 'a-c-sy'   , name: 'Solarized Yellow'  }
          , green:   { class: 'a-c-sg'   , name: 'Solarized Green'   }
          , cyan:    { class: 'a-c-sc'   , name: 'Solarized Cyan'    }
          , blue:    { class: 'a-c-sb'   , name: 'Solarized Blue'    }
          , violet:  { class: 'a-c-sv'   , name: 'Solarized Violet'  }
          , magenta: { class: 'a-c-sm'   , name: 'Solarized Magenta' }
          }
        }
      , 'Lunarized': {
          dark: {
            text   : { class: 'a-c-l0'   , name: 'Lunarized Base0'   }
          , emph   : { class: 'a-c-l1'   , name: 'Lunarized Base1'   }
          , deemph : { class: 'a-c-l01'  , name: 'Lunarized Base01'  }
          , hilite : { class: 'a-bc-l02' , name: 'Lunarized Base02'  }
          , bg     : { class: 'a-bc-l03' , name: 'Lunarized Base03'  }
          }
        , light: {
            text   : { class: 'a-c-l00'  , name: 'Lunarized Base00'  }
          , emph   : { class: 'a-c-l01'  , name: 'Lunarized Base01'  }
          , deemph : { class: 'a-c-l1'   , name: 'Lunarized Base1'   }
          , hilite : { class: 'a-bc-l2'  , name: 'Lunarized Base2'   }
          , bg     : { class: 'a-bc-l3'  , name: 'Lunarized Base3'   }
          }
        , accent: {
            cyan:    { class: 'a-c-lc'   , name: 'Lunarized Cyan'    }
          , blue:    { class: 'a-c-lb'   , name: 'Lunarized Blue'    }
          , indigo:  { class: 'a-c-li'   , name: 'Lunarized Indigo'  }
          , violet:  { class: 'a-c-lv'   , name: 'Lunarized Violet'  }
          , red:     { class: 'a-c-lr'   , name: 'Lunarized Red'     }
          , orange:  { class: 'a-c-lo'   , name: 'Lunarized Orange'  }
          , yellow:  { class: 'a-c-ly'   , name: 'Lunarized Yellow'  }
          , green:   { class: 'a-c-lg'   , name: 'Lunarized Green'   }
          }
        }
      }
      var theme = {
        //- pay careful attention to the [bg|fg|ac]_scheme here
        text    : bases[settings.fg_scheme][settings.mode].text
      , emph    : bases[settings.fg_scheme][settings.mode].emph
      , deemph  : bases[settings.fg_scheme][settings.mode].deemph
      , hilite  : bases[settings.bg_scheme][settings.mode].hilite
      , bg      : bases[settings.bg_scheme][settings.mode].bg
      , red     : bases[settings.ac_scheme].accent.red
      , orange  : bases[settings.ac_scheme].accent.orange
      , yellow  : bases[settings.ac_scheme].accent.yellow
      , green   : bases[settings.ac_scheme].accent.green
      , cyan    : bases[settings.ac_scheme].accent.cyan
      , blue    : bases[settings.ac_scheme].accent.blue
      , purple1 : bases[settings.ac_scheme].accent.indigo  || bases[settings.ac_scheme].accent.violet
      , purple2 : bases[settings.ac_scheme].accent.magenta || bases[settings.ac_scheme].accent.violet
      }
    section.o-Box(class=[ theme.bg.class , theme.text.class ])
      h2= settings.mode.charAt(0).toUpperCase() + settings.mode.slice(1) + ' Color Theme'
      section
        h3 Bases
        ul
          mixin emphasizeWhenSchemesDisagree(content)
            if (settings.bg_scheme !== settings.fg_scheme)
              em= content
            else
              = content
          li
            +emphasizeWhenSchemesDisagree(theme.text.name)
            |: text
          li(class=theme.emph.class)
            +emphasizeWhenSchemesDisagree(theme.emph.name)
            |: emphasis
          li(class=theme.deemph.class)
            +emphasizeWhenSchemesDisagree(theme.deemph.name)
            |: de-emphasis
          li(class=theme.hilite.class)
            = theme.hilite.name
            | : highlight
          li
            = theme.bg.name
            | : background
      section
        h3 Accents
        mixin red()
          li(class=theme.red.class)= theme.red.name + ':'
            ul
              li programming control (#[code if], #[code for], #[code switch], #[code return])
              li other control (#[code public], #[code private], #[code static])
              li Jade buffered comments&nbsp;
              li CSS pseudo-elements and -classes
        mixin orange()
          li(class=theme.orange.class)= theme.orange.name + ':'
            ul
              li delimiters and operators (#[code +], #[code ==], #[code new], #[code typeof])
              li Jade class names
        mixin yellow()
          li(class=theme.yellow.class)= theme.yellow.name + ':'
            ul
              li HTML/Jade attribute names
              li CSS property names
              li pre-defined keywords and types (#[code var], #[code function], #[code int], #[code class])
        mixin green()
          li(class=theme.green.class)= theme.green.name + ':'
            ul
              li HTML/Jade characters and entities
              li CSS numeric values with units
              li constant values (numbers, colors, booleans, #[code null])
        mixin cyan()
          li(class=theme.cyan.class)= theme.cyan.name + ':'
            ul
              li HTML attribute values
              li CSS property values
              li strings (except in CSS)
        mixin blue()
          li(class=theme.blue.class)= theme.blue.name + ':'
            ul
              li HTML/Jade tags
              li CSS/Less class selectors
              li JS function definitions and function calls
        mixin purple1()
          li(class=theme.purple1.class)= theme.purple1.name + ':'
            ul
              li variable/parameter names
              li function arguments
              li Jade tag interpolation
        mixin purple2()
          li(class=theme.purple2.class)= theme.purple2.name + ':'
            ul
              //- li string delimiters (#[code &quot;] and #[code &apos;])
              li CSS strings
              li object/class/function references (custom, built-in, #[code this], #[code prototype], #[code String], #[code Array])
              li Jade id names
        ul
          if settings.ac_scheme === 'Lunarized'
            +cyan()
            +blue()
            +purple1()
            +purple2()
          +red()
          +orange()
          +yellow()
          +green()
          if settings.ac_scheme === 'Solarized'
            +cyan()
            +blue()
            +purple1()
            +purple2()
      section
        h3 Sample
        -
          var r  = theme.red.class
            , o  = theme.orange.class
            , y  = theme.yellow.class
            , g  = theme.green.class
            , c  = theme.cyan.class
            , b  = theme.blue.class
            , p1 = theme.purple1.class
            , p2 = theme.purple2.class
            , emph    = theme.emph.class
            , deemph  = theme.deemph.class
            , hilite  = theme.hilite.class
        pre.
          #[span(class=b) &lt;tag #[span(class=y) attribute=#[span(class=c) &quot;value value&quot;]]&gt;]contents#[span(class=b) &lt;#{'/'}tag&gt;]
          #[small(class=deemph) &lt;!-- HTML comment --&gt;]
          #[span(class=b) &lt;style #[span(class=y) scoped]&gt;]
            #[small(class=deemph) /* block comment */]
            element,
            #[span(class=b) .class] #[span(class=o)= '{']
              #[small(class=deemph) #{'//'} inline comment]
              #[span(class=y) property]: #[span(class=c) value];
              #[span(class=y) property]: #[span(class=g) 48px];
              #[span(class=b) .command(#[span(class=p1) argument, #[span(class=p2) 'string']])];
              #[strong(class=[emph,hilite]) &amp;#[span(class=r) :pseudo] #[span(class=o)= '{'] #[span(class=y) property]: #[span(class=c) value]; #[span(class=o)= '}']]
            #[span(class=o)= '}']
          #[span(class=b) &lt;#{'/'}style&gt;]
          #[span(class=b) &lt;script&gt;]
            #[span(class=y) function] #[span(class=b) Person(#[span(class=p1) name])] #[span(class=o)= '{'] #[small(class=deemph) #{'//'} constructor for class `Person`]
              #[span(class=p2) this].greetings #[span(class=o) =] #[span(class=o) #{'['}] #[span(class=c) 'hello!']#[span(class=o) ,] #[span(class=c) 'hi!']#[span(class=o) ,] handshake #[span(class=o) #{']'}];
            #[span(class=o)= '}']
            #[span(class=y) function] #[span(class=b) TestSubject(#[span(class=p1) name#[span(class=o) ,] adopted])] #[span(class=o)= '{'] #[small(class=deemph) #{'//'} constructor for class `TestSubject`]
              #[span(class=p2) Person]#[span(class=b) .call(#[span(class=p1) #[span(class=p2) this]#[span(class=o) ,] name#[span(class=o) ,] adopted])]; #[small(class=deemph) #{'//'} calls the parent constructor]
              #[span(class=r) if (#[span(class=o) typeof] #[span(class=p1) adopted] #[span(class=o) ===] #[span(class=c) 'boolean'])] #[span(class=o)= '{']
                #[strong(class=[emph,hilite]) #[span(class=p2) this].is_adopted #[span(class=o) =] #[span(class=p1) adopted];]
              #[span(class=o)= '}'] #[span(class=r) else] #[span(class=p2) this].is_adopted #[span(class=o) =] #[span(class=g) false];
            #[span(class=o)= '}']
            #[span(class=p2) this].location #[span(class=o) =] #[span(class=o) #{'{'}] name#[span(class=o) :] #[span(class=c) 'Aperture Science Enrichment Center'] #[span(class=o) #{'}'}]
            #[span(class=p2) Util]#[span(class=b) .extend(#[span(class=p1) #[span(class=p2) TestSubject]#[span(class=o) ,] #[span(class=p2) Person]])]; #[small(class=deemph) #{'//'} extends `TestSubject` from `Person`]
            #[span(class=y) var] you #[span(class=o) =] #[span(class=o) new] #[span(class=b) TestSubject(#[span(class=p1) #[span(class=c) 'Chell']#[span(class=o) ,] #[span(class=g) true]])]; #[small(class=deemph) #{'//'} creates an instance of `TestSubject`]
          #[span(class=b) &lt;#{'/'}script&gt;]
  +demo({
    mode: 'dark',
    bg_scheme: 'Lunarized',
    fg_scheme: 'Solarized',
    ac_scheme: 'Lunarized'
  })
  +demo({
    mode: 'light',
    bg_scheme: 'Solarized',
    fg_scheme: 'Lunarized',
    ac_scheme: 'Solarized'
  })
